C51 COMPILER V9.59.0.0   SPI                                                               09/24/2018 17:36:19 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\Objects\spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE spi.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\spi.l
                    -st) TABS(2) OBJECT(.\Objects\spi.obj)

line level    source

   1          /**
   2           SPI HOMEWORK2 , LABWORK2 (SAME PROGRAM)
   3           */
   4          
   5          /* @section  I N C L U D E S */
   6          #include "at89c5131.h"
   7          #include "stdio.h"
   8          #define LCD_data  P2                // LCD Data port
   9          #define sample 1
  10          void SPI_Init();
  11          void LCD_Init();
  12          void Timer_Init();
  13          void LCD_DataWrite(char dat);
  14          void LCD_CmdWrite(char cmd);
  15          void LCD_StringWrite(char * str, unsigned char len);
  16          void LCD_Ready();
  17          void sdelay(int delay);
  18          void delay_ms(int delay);
  19          char int_to_string(int val);
  20          void sample_data(int no_of_samples);
  21          void binary_to_ascii(int binary);
  22          sbit CS_BAR = P1^4;                 // Chip Select for the ADC
  23          sbit LCD_rs = P0^0;                 // LCD Register Select
  24          sbit LCD_rw = P0^1;                 // LCD Read/Write
  25          sbit LCD_en = P0^2;                 // LCD Enable
  26          sbit LCD_busy = P2^7;               // LCD Busy Flag
  27          sbit ONULL = P1^0;
  28          bit transmit_completed= 0;              // To check if spi data transmit is complete
  29          bit offset_null = 0;                // Check if offset nulling is enabled
  30          bit roundoff = 0;
  31          
  32          unsigned long adcVal=0, voltage= 0 , sum = 0,tempadcVal=0 ,temp_low,temp_high,try0=0;
  33          unsigned long avgVal=0;
  34          unsigned long result=0;
  35          char temp_flag;
  36          unsigned char serial_data;
  37          unsigned char data_save_high;
  38          unsigned char data_save_low;
  39          unsigned char data_save_low;
  40          unsigned char count=0, i=0;
  41          unsigned char c = 0;
  42          float fweight=0;
  43          
  44          /**
  45          
  46           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
  47           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
  48           *                   P1.4(SSbar)
  49                               P1.6(SCK)
  50           */
  51           
  52          void main(void)
  53          {
  54   1        char mystring1[]="Distance:";
C51 COMPILER V9.59.0.0   SPI                                                               09/24/2018 17:36:19 PAGE 2   

  55   1        char mystring2[] ="cm";
  56   1        CS_BAR = 1;
  57   1        P1 = P1 | 0x20;
  58   1        SPI_Init();
  59   1        LCD_Init();
  60   1        Timer_Init();
  61   1        delay_ms(50);
  62   1        LCD_CmdWrite(0x80);
  63   1        LCD_StringWrite(mystring1,9);
  64   1        LCD_CmdWrite(0x8D);
  65   1        LCD_StringWrite(mystring2,2);
  66   1      
  67   1        while(1)
  68   1        {
  69   2          CS_BAR = 0;                               // falling edge of CS bar
  70   2          SPDAT= 0x00;                      // first 4 bits will be address of the channel
  71   2          while(!transmit_completed);               // wait for the transmit complete flag  
  72   2          data_save_high = serial_data;               // save the 
  73   2          transmit_completed = 0;                   // make the flag 0
  74   2          SPDAT =0x00;  
  75   2          while(!transmit_completed); 
  76   2          data_save_low = serial_data;
  77   2          transmit_completed = 0; 
  78   2          CS_BAR = 1;    
  79   2          tempadcVal = (data_save_high<<2) + (data_save_low>>6);    // save the 10 bits in one variable
  80   2        }
  81   1      }
  82          /**
  83           * FUNCTION_PURPOSE:interrupt
  84           * FUNCTION_INPUTS: void
  85           * FUNCTION_OUTPUTS: transmit_complete is software transfert flag
  86           */
  87          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
  88          {
  89   1        switch  ( SPSTA )         /* read and clear spi status register */
  90   1        {
  91   2          case 0x80:  
  92   2            serial_data=SPDAT;   /* read receive data */
  93   2            transmit_completed=1;/* set software flag */
  94   2          break;
  95   2      
  96   2          case 0x10:
  97   2            
  98   2          break;
  99   2        
 100   2          case 0x40:
 101   2          break;
 102   2        }
 103   1      }
 104          
 105          void timer0_ISR (void) interrupt 1
 106          {
 107   1        //Initialize TH0
 108   1        //Initialize TL0
 109   1        //Increment Overflow 
 110   1        //Write averaging of 10 samples code here
 111   1        TH0 = 0xB1;
 112   1        TL0 = 0xDF;
 113   1        temp_flag = TF0;
 114   1        count ++;
 115   1        adcVal += tempadcVal;
 116   1        if (count == 10){
C51 COMPILER V9.59.0.0   SPI                                                               09/24/2018 17:36:19 PAGE 3   

 117   2          avgVal = adcVal/ count;
 118   2          result = (avgVal)*(3300.0/1024)*1.002;
 119   2          result = (-125.93*result/1000)+ 204.52;
 120   2          
 121   2          LCD_CmdWrite(0x89);
 122   2          
 123   2          c = result/1000;
 124   2          LCD_DataWrite(c+'0');
 125   2          result = result%1000;
 126   2          c = result/100;
 127   2          LCD_DataWrite(c+'0');
 128   2          result = result%100;
 129   2          c = result/10;
 130   2          LCD_DataWrite(c+'0');
 131   2          c = result%10;
 132   2          LCD_DataWrite(c+'0');
 133   2      
 134   2          count = 0;
 135   2          adcVal = 0;
 136   2        }
 137   1        
 138   1      
 139   1      }
 140          
 141          /**
 142          
 143           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
 144           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
 145           *                   P1.4(SSbar)
 146                               P1.6(SCK)
 147           */ 
 148          void SPI_Init()
 149          {
 150   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
 151   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
 152   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
 153   1        SPCON |= 0x10;                  // Master mode 
 154   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
 155   1        SPCON &= ~0x04;                 // CPHA=0; transmit mode example 
 156   1        IEN1 |= 0x04;                   // enable spi interrupt 
 157   1        EA=1;                           // enable interrupts 
 158   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
 159   1      //  IPH0 |=0x10;
 160   1      //  IPL0 |=0x10;
 161   1      }
 162          
 163          void Timer_Init()
 164          {
 165   1        // Set Timer0 to work in up counting 16 bit mode. Counts upto 
 166   1        // 65536 depending upon the calues of TH0 and TL0
 167   1        // The timer counts 65536 processor cycles. A processor cycle is 
 168   1        // 12 clocks. FOr 24 MHz, it takes 65536/2 uS to overflow
 169   1          
 170   1        //Initialize TH0
 171   1        //Initialize TL0
 172   1        //Configure TMOD 
 173   1        //Set ET0
 174   1        //Set TR0
 175   1        TH0 = 0xB1;
 176   1        TL0 = 0xDF;
 177   1        TMOD = 0x01;
 178   1        ET0 = 1;
C51 COMPILER V9.59.0.0   SPI                                                               09/24/2018 17:36:19 PAGE 4   

 179   1        TR0 = 1;
 180   1      }
 181          /**
 182           * FUNCTION_PURPOSE:LCD Initialization
 183           * FUNCTION_INPUTS: void
 184           * FUNCTION_OUTPUTS: none
 185           */
 186          void LCD_Init()
 187          {
 188   1        sdelay(100);
 189   1        LCD_CmdWrite(0x38);     // LCD 2lines, 5*7 matrix
 190   1        LCD_CmdWrite(0x0C);     // Display ON cursor ON  Blinking off
 191   1        LCD_CmdWrite(0x01);     // Clear the LCD
 192   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
 193   1      }
 194          
 195          /**
 196           * FUNCTION_PURPOSE: Write Command to LCD
 197           * FUNCTION_INPUTS: cmd- command to be written
 198           * FUNCTION_OUTPUTS: none
 199           */
 200          void LCD_CmdWrite(char cmd)
 201          {
 202   1        LCD_Ready();
 203   1        LCD_data=cmd;           // Send the command to LCD
 204   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 205   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
 206   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 207   1        sdelay(5);
 208   1        LCD_en=0;
 209   1        sdelay(5);
 210   1      }
 211          
 212          /**
 213           * FUNCTION_PURPOSE: Write Command to LCD
 214           * FUNCTION_INPUTS: dat- data to be written
 215           * FUNCTION_OUTPUTS: none
 216           */
 217          void LCD_DataWrite( char dat)
 218          {
 219   1        LCD_Ready();
 220   1        LCD_data=dat;           // Send the data to LCD
 221   1        LCD_rs=1;               // Select the Data Register by pulling LCD_rs HIGH
 222   1        LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 223   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 224   1        sdelay(5);
 225   1        LCD_en=0;
 226   1        sdelay(5);
 227   1      }
 228          /**
 229           * FUNCTION_PURPOSE: Write a string on the LCD Screen
 230           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
 231                              2. length - length of the array
 232           * FUNCTION_OUTPUTS: none
 233           */
 234          void LCD_StringWrite( char * str, unsigned char length)
 235          {
 236   1          while(length>0)
 237   1          {
 238   2              LCD_DataWrite(*str);
 239   2              str++;
 240   2              length--;
C51 COMPILER V9.59.0.0   SPI                                                               09/24/2018 17:36:19 PAGE 5   

 241   2          }
 242   1      }
 243          
 244          /**
 245           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 246           * FUNCTION_INPUTS: void
 247           * FUNCTION_OUTPUTS: none
 248           */
 249          void LCD_Ready()
 250          {
 251   1        LCD_data = 0xFF;
 252   1        LCD_rs = 0;
 253   1        LCD_rw = 1;
 254   1        LCD_en = 0;
 255   1        sdelay(5);
 256   1        LCD_en = 1;
 257   1      //  while(LCD_busy == 1)
 258   1      //  {
 259   1      //    LCD_en = 0;
 260   1      //    LCD_en = 1;
 261   1      //  }
 262   1        LCD_en = 0;
 263   1      }
 264          
 265          /**
 266           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 267           * FUNCTION_INPUTS: void
 268           * FUNCTION_OUTPUTS: none
 269           */
 270          void sdelay(int delay)
 271          {
 272   1        char d=0;
 273   1        while(delay>0)
 274   1        {
 275   2          for(d=0;d<5;d++);
 276   2          delay--;
 277   2        }
 278   1      }
 279          
 280          /**
 281           * FUNCTION_PURPOSE: A delay of around 1000us for a 24MHz crystel
 282           * FUNCTION_INPUTS: void
 283           * FUNCTION_OUTPUTS: none
 284           */
 285          void delay_ms(int delay)
 286          {
 287   1        int d=0;
 288   1        while(delay>0)
 289   1        {
 290   2          for(d=0;d<382;d++);
 291   2          delay--;
 292   2        }
 293   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    791    ----
   CONSTANT SIZE    =     13    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47      19
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   SPI                                                               09/24/2018 17:36:19 PAGE 6   

   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
